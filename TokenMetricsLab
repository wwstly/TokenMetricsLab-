# TokenMetricsLab.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import requests
from datetime import datetime
from typing import Dict, Any

class TokenMetricsLab:
    def __init__(self, api_base_url: str):
        self.api_base_url = api_base_url
        self.data = pd.DataFrame()

    def fetch_token_data(self, token_symbol: str) -> Dict[str, Any]:
        """
        Fetch data for a specific token.
        """
        url = f"{self.api_base_url}/v1/tokens/{token_symbol}/metrics"
        response = requests.get(url)
        return response.json()

    def load_token_data(self, token_symbol: str):
        """
        Load token data into the DataFrame.
        """
        token_data = self.fetch_token_data(token_symbol)
        self.data = pd.json_normalize(token_data)
        print(f"Data loaded for token: {token_symbol}")

    def analyze_token(self):
        """
        Analyze token data.
        """
        if self.data.empty:
            raise ValueError("Data is not loaded.")
        
        token_name = self.data['name'].iloc[0]
        token_symbol = self.data['symbol'].iloc[0]
        token_price = self.data['price_usd'].iloc[0]
        token_market_cap = self.data['market_cap_usd'].iloc[0]
        
        print(f"Token Name: {token_name}")
        print(f"Token Symbol: {token_symbol}")
        print(f"Token Price (USD): {token_price}")
        print(f"Market Cap (USD): {token_market_cap}")

    def plot_token_data(self):
        """
        Plot token data.
        """
        if self.data.empty:
            raise ValueError("Data is not loaded.")
        
        time_series = self.data['timestamp']
        price_series = self.data['price_usd']
        
        plt.figure(figsize=(10, 6))
        plt.plot(time_series, price_series, color='blue', alpha=0.7)
        plt.xlabel('Time')
        plt.ylabel('Price (USD)')
        plt.title('Token Price Over Time')
        plt.grid(True)
        plt.show()

    def generate_report(self) -> Dict[str, Any]:
        """
        Generate a report on the token data.
        """
        if self.data.empty:
            raise ValueError("Data is not loaded.")
        
        token_name = self.data['name'].iloc[0]
        token_symbol = self.data['symbol'].iloc[0]
        token_price = self.data['price_usd'].iloc[0]
        token_market_cap = self.data['market_cap_usd'].iloc[0]
        avg_volume = np.mean(self.data['volume_usd'])
        
        report = {
            'token_name': token_name,
            'token_symbol': token_symbol,
            'token_price': token_price,
            'market_cap': token_market_cap,
            'average_volume': avg_volume
        }
        
        return report

# Example usage
if __name__ == "__main__":
    api_base_url = 'https://api.example.com'  # Example base URL
    token_metrics_lab = TokenMetricsLab(api_base_url)
    
    # Load data for a specific token (example token symbol: 'BTC')
    token_metrics_lab.load_token_data(token_symbol='BTC')
    
    # Analyze token data
    token_metrics_lab.analyze_token()
    
    # Plot token data
    token_metrics_lab.plot_token_data()
    
    # Generate and print a report
    report = token_metrics_lab.generate_report()
    print("Token Data Report:")
    for key, value in report.items():
        print(f"{key}: {value}")
